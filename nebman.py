#!/usr/bin/python3
## 
## required imports
import os.path
import subprocess
import sqlite3
import sys
import requests
import shutil
import tarfile
import base64

# Set Constants
NEBMANDB='nebmanDB.db'
CURRENTVERSION='1.9.5'

# Set global variables
existingLighthouseID = 10
existingEndpointID = 50
existingNetwork = "notset"
existingVersion='Unknown'

# terminal colour text codes (found via a so page)
class bcolors:
    GREEN = '\033[92m'
    ORANGE = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'
    vmTag = ''

# Report on the current state of key elements of the app.
def checkState():
    # Ref gobal variable
    global existingVersion
    # Does the DB exist
    if os.path.exists(NEBMANDB):
        print("- Database is found: " + bcolors.GREEN + "Yes" + bcolors.END)
    else:
        print("- Database is found: " + bcolors.RED + "No" + bcolors.END)
    # Does the Certs folder exist   
    if os.path.exists('./certs/'):
        print("- Certs folder is found: " + bcolors.GREEN + "Yes" + bcolors.END)
    else:
        print("- Certs folder is found: " + bcolors.RED + "No" + bcolors.END)
    # Does the CA exist   
    if os.path.exists('./certs/ca.crt') and os.path.exists('./certs/ca.key'):
        print("- CA cert and key are found: " + bcolors.GREEN + "Yes" + bcolors.END)
    else:
        print("- CA cert and key are found: " + bcolors.RED + "No" + bcolors.END)
    # Does nebula binary exist and if so what's the version.
    if os.path.exists('nebula'):
        getNewVersion="./nebula --version"
        existingVersion = str(subprocess.check_output(getNewVersion, shell=True))
        existingVersion = str(existingVersion[11:16])
        print("- Nebula binary found, version: " + existingVersion)
    else:
        print("- Nebula binary note found: " + bcolors.RED + "Not found" + bcolors.END)



# initialise a new DB for nebman or load settings if existing DB and contents are located.
def initDB():
    # check if database file exists, if not, create it.
    if not os.path.exists(NEBMANDB):
        dbConnect = sqlite3.connect(NEBMANDB)
        dbCurser = dbConnect.cursor()
        dbCurser.execute("CREATE TABLE nebmanClients(id, hostname, network, lighthouse, os, services, version, UNIQUE(hostname))")
        dbConnect.commit()
        dbConnect.close()
        # confirm DB exists, in case create above failed/ did not complete.
        if not os.path.exists(NEBMANDB):
            sys.exit("Database does not exist, exiting")
    # if database does exist set required values
    else:
        # Reference the global variables 
        global existingLighthouseID
        global existingEndpointID
        global existingNetwork

        dbConnect = sqlite3.connect(NEBMANDB)
        dbCurser = dbConnect.cursor()
        dbContent = dbCurser.execute("SELECT * FROM nebmanClients")
        for row in dbContent:
            existingNetwork = row[2]
            if row[3] == 'y':
                if row[0] > existingLighthouseID:
                    existingLighthouseID = row[0]
            else:
                if row[0] > existingEndpointID:
                    existingEndpointID = row[0]

# Add a function to create ansible directory for inventory file
def ansibleInit():
    if not os.path.exists('ansible'):
        os.makedirs('ansible')
    if not os.path.exists('ansible/inventory'):
        os.makedirs('ansible/inventory')
    if not os.path.exists('ansible/playbooks'):
        os.makedirs('ansible/playbooks')
    if not os.path.exists('ansible/playbooks/templates'):
        os.makedirs('ansible/playbooks/templates')
    if not os.path.exists('ansible/playbooks/files'):
        os.makedirs('ansible/playbooks/files')

def ansibleGen():
    # Generate ansile directory structure if it doesn't exist.
    ansibleInit()
    # Generate inventory file once database exists
    if not os.path.exists(NEBMANDB):
        sys.exit("Database does not exist, exiting")
    elif existingNetwork == "notset":
        sys.exit("Network not configured, please ensure hosts including a lighthouse are defined, exiting")       
    else:
        # open DB connection and iterate through to find Lighthouse details
        x = 0
        dbConnect = sqlite3.connect(NEBMANDB)
        dbCurser = dbConnect.cursor()
        dbContent = dbCurser.execute("SELECT * FROM nebmanClients")
        for row in dbContent:
            if row[3] == 'y' and x < 1:
                lighthouseHostname = row[1]
                lighthouseIP = existingNetwork + "." + str(row[0])
                x+=1
        dbConnect.close()

        # open DB connection and filestream for ansible inventory.ini file to find host details
        dbConnect = sqlite3.connect(NEBMANDB)
        dbCurser = dbConnect.cursor()
        dbContent = dbCurser.execute("SELECT * FROM nebmanClients")
        ansIventory = open("ansible/inventory/inventory.ini", "w")
        ansIventory.write("[nebula]\n")
        for row in dbContent:
            ansIventory.write(row[1]+" cert_name="+row[1]+" lighthouse_ip="+lighthouseIP+" lighthouse_hostname="+lighthouseHostname+"\n")
        # Write hostnames out to inventory file
        for row in dbContent:
            ansIventory.write(row[1]+" cert_name="+row[1]+"\n")
        # Close DB connection and file stream
        dbConnect.close()
        ansIventory.close()
    # Copy nebula binary to Ansible files folder.
    if os.path.exists("nebula"):
        shutil.copy2('./nebula', './ansible/playbooks/files/nebula')
    # Copy certs to Ansible files folder.
    if os.path.exists("certs"):
        shutil.copytree('certs', './ansible/playbooks/files/certs', dirs_exist_ok=True)

    # Write ansible playbook out to file from base64 version
    # base64 of playbook to simplify storage
    ansPlaybook="IyEvdXNyL2Jpbi9lbnYgYW5zaWJsZS1wbGF5Ym9vawotLS0KLSBuYW1lOiBDb25maWd1cmUgYW5kIHN0YXJ0IE5lYnVsYQogIGhvc3RzOiBuZWJ1bGEKICBiZWNvbWU6IHRydWUKICBnYXRoZXJfZmFjdHM6IGZhbHNlCgogIHRhc2tzOgogIC0gbmFtZTogQ3JlYXRlIGRpciBmb3IgTmVidWxhIGZpbGVzCiAgICBmaWxlOgogICAgICBwYXRoOiAiL3Vzci9sb2NhbC9iaW4vbmVidWxhIgogICAgICBzdGF0ZTogZGlyZWN0b3J5CiAgICAgIG1vZGU6ICcwNzAwJwoKICAtIG5hbWU6IENvcHkgY2VydCBmaWxlcwogICAgY29weToKICAgICAgc3JjOiAie3sgaXRlbSB9fSIKICAgICAgZGVzdDogIi91c3IvbG9jYWwvYmluL25lYnVsYSIKICAgICAgbW9kZTogJzA2MDAnCiAgICBsb29wOgogICAgICAtIGNlcnRzL3t7IGNlcnRfbmFtZSB9fS5rZXkKICAgICAgLSBjZXJ0cy97eyBjZXJ0X25hbWUgfX0uY3J0CiAgICAgIC0gY2VydHMvY2EuY3J0CgogIC0gbmFtZTogQ29weSBuZWJ1bGEgYmluYXJ5CiAgICBjb3B5OgogICAgICBzcmM6ICJ7eyBpdGVtIH19IgogICAgICBkZXN0OiAiL3Vzci9sb2NhbC9iaW4vbmVidWxhLyIKICAgICAgbW9kZTogJzA3MDAnCiAgICBsb29wOgogICAgICAtIG5lYnVsYQogIAogIC0gbmFtZTogQ29weSBOZWJ1bGEgTGlnaHRob3VzZSBjb25maWcKICAgIHRlbXBsYXRlOgogICAgICBzcmM6IG5lYnVsYS1saWdodGhvdXNlLnltbC5qMgogICAgICBkZXN0OiAvdXNyL2xvY2FsL2Jpbi9uZWJ1bGEve3sgY2VydF9uYW1lIH19LnltbAogICAgICBtb2RlOiAnMDY0NCcKICAgIHdoZW46IGNlcnRfbmFtZSA9PSBsaWdodGhvdXNlX2hvc3RuYW1lCgogIC0gbmFtZTogQ29weSBOZWJ1bGEgRW5kcG9pbnQgY29uZmlnCiAgICB0ZW1wbGF0ZToKICAgICAgc3JjOiBuZWJ1bGEtZW5kcG9pbnQueW1sLmoyCiAgICAgIGRlc3Q6IC91c3IvbG9jYWwvYmluL25lYnVsYS97eyBjZXJ0X25hbWUgfX0ueW1sCiAgICAgIG1vZGU6ICcwNjQ0JwogICAgd2hlbjogY2VydF9uYW1lICE9IGxpZ2h0aG91c2VfaG9zdG5hbWUKCiAgLSBuYW1lOiBDb3B5IHNlcnZpY2UKICAgIHRlbXBsYXRlOgogICAgICBzcmM6IG5lYnVsYS5zZXJ2aWNlLmoyCiAgICAgIGRlc3Q6IC9ldGMvc3lzdGVtZC9zeXN0ZW0vbmVidWxhLnNlcnZpY2UKICAgICAgbW9kZTogJzA2NDQnCgogIC0gbmFtZTogRW5hYmxlIElQIEZvcndhcmRpbmcKICAgIGFuc2libGUuYnVpbHRpbi5saW5laW5maWxlOgogICAgICBwYXRoOiAvZXRjL3N5c2N0bC5jb25mCiAgICAgIGxpbmU6IG5ldC5pcHY0LmlwX2ZvcndhcmQgPSAxCiAgICAgIGNyZWF0ZTogeWVzCgogIC0gbmFtZTogU3RhcnQgTmVidWxhIHNlcnZpY2UKICAgIGFuc2libGUuYnVpbHRpbi5zZXJ2aWNlOgogICAgICBuYW1lOiBuZWJ1bGEKICAgICAgc3RhdGU6IHN0YXJ0ZWQKICAgICAgZW5hYmxlZDogeWVzCgogIC0gbmFtZTogQ29uZmlndXJlIFVGVyBOZWJ1bGEKICAgIGNvbW11bml0eS5nZW5lcmFsLnVmdzoKICAgICAgcnVsZTogYWxsb3cKICAgICAgcG9ydDogJzQyNDInCiAgICAgIHByb3RvOiB1ZHAKCiAgLSBuYW1lOiBSZWxvYWQgVUZXICh0byBhcHBseSBuZXcgcnVsZSkKICAgIGNvbW11bml0eS5nZW5lcmFsLnVmdzoKICAgICAgc3RhdGU6IHJlbG9hZGVkCi4uLg=="
    ansPlaybookDecode = base64.b64decode(ansPlaybook)
    ansPlaybookDecode = ansPlaybookDecode.decode("utf-8")
    ansPlaybook = open("ansible/playbooks/nebula.yml", "w")
    ansPlaybook.write(ansPlaybookDecode)
    ansPlaybook.close()
    
    # Write Linux service config template out to file from base64 version
    # base64 of template to simplify storage
    ansLinuxService="W1VuaXRdCkRlc2NyaXB0aW9uPU5lYnVsYSBNZXNoIFNlcnZpY2UKQWZ0ZXI9bmV0d29yay50YXJnZXQKCltTZXJ2aWNlXQpFeGVjU3RhcnQ9L3Vzci9sb2NhbC9iaW4vbmVidWxhL25lYnVsYSAtY29uZmlnIC91c3IvbG9jYWwvYmluL25lYnVsYS97eyBjZXJ0X25hbWUgfX0ueW1sClJlc3RhcnQ9YWx3YXlzCgpbSW5zdGFsbF0KV2FudGVkQnk9bXVsdGktdXNlci50YXJnZXQ="
    ansLinuxServiceDecode = base64.b64decode(ansLinuxService)
    ansLinuxServiceDecode = ansLinuxServiceDecode.decode("utf-8")
    ansLinuxService = open("ansible/playbooks/templates/nebula.service.j2", "w")
    ansLinuxService.write(ansLinuxServiceDecode)
    ansLinuxService.close()

    # Write Nebula Endpoint config template out to file from base64 version
    # base64 of template to simplify storage
    ansNebulaEndpointConfig=""
    ansNebulaConfigEndpointDecode = base64.b64decode(ansNebulaEndpointConfig)
    ansNebulaConfigEndpointDecode = ansNebulaConfigEndpointDecode.decode("utf-8")
    ansNebulaEndpointConfig = open("ansible/playbooks/templates/nebula-endpoint.yml.j2", "w")
    ansNebulaEndpointConfig.write(ansNebulaConfigEndpointDecode)
    ansNebulaEndpointConfig.close()

# Write Nebula Lighthouse config template out to file from base64 version
    # base64 of template to simplify storage
    ansNebulaLighthouseConfig=""
    ansNebulaConfigLighthouseDecode = base64.b64decode(ansNebulaLighthouseConfig)
    ansNebulaConfigLighthouseDecode = ansNebulaConfigLighthouseDecode.decode("utf-8")
    ansNebulaLighthouseConfig = open("ansible/playbooks/templates/nebula-lighthouse.yml.j2", "w")
    ansNebulaLighthouseConfig.write(ansNebulaConfigLighthouseDecode)
    ansNebulaLighthouseConfig.close()

def pullNebula():
    # Ref global variable
    global existingVersion
    # Set file variables, concentrating on Linux for initial build
    nebulaLinuxURL="https://github.com/slackhq/nebula/releases/download/v1.9.5/nebula-linux-amd64.tar.gz"
    nebulaLinuxDL="nebula-linux-amd64.tar.gz"
    nebulaLinuxCurrent="nebula-linux.tar.gz"
    nebulaFile="nebula"
    nebulaCertFile="nebula-cert"
    # If Nebula download doesn't exist, download it.
    if not os.path.exists(nebulaLinuxDL):
        response = requests.get(nebulaLinuxURL)
        response.raw.decode_content = True
        with open(nebulaLinuxDL, 'wb') as fileDL:
            for block in response.iter_content(chunk_size=1024):
                fileDL.write(block)
            fileDL.close()
        # If Nebula binary doesn't exist, extract the tar.
        if not os.path.exists(nebulaFile):
            nebulaTar = tarfile.open(nebulaLinuxDL)
            nebulaTar.extractall(filter='data')
            nebulaTar.close()

# Display all clients in the DB
def listClients():
    if not os.path.exists(NEBMANDB):
        sys.exit("Database does not exist, exiting")
    else:
        dbConnect = sqlite3.connect(NEBMANDB)
        dbCurser = dbConnect.cursor()
        dbContent = dbCurser.execute("SELECT * FROM nebmanClients")
        print(dbContent.fetchall())
        dbConnect.close()

def addClient():
    # add client to DB
    newHostname = input("Please enter new hostname (FQDN): ")
    newNetwork = input("Please enter network address (192.168.1): ")
    newLighthouse = input("Is this new a lighthouse (y/n): ")
    newOS = input("Please enter OS (Windows, Ubuntu, Fedora): ")
    newServices = input("Please enter comma seperated list of services (ssh,http): ")
    newVersion = CURRENTVERSION

    # Set new ID value based on endpoint type
    if newLighthouse == 'y':
        newID = existingLighthouseID + 1
    else:
        newID = existingEndpointID + 1

    # If DB doesn't exist, exit the app, otherwise create new entry in the DB
    if not os.path.exists(NEBMANDB):
        sys.exit("Database does not exist, exiting")
    else:
        dbConnect = sqlite3.connect(NEBMANDB)
        dbCurser = dbConnect.cursor()

        # pass inserted values into sqlite3 db
        dbCurser.execute("INSERT OR IGNORE INTO nebmanClients(id, hostname, network, lighthouse, os, services, version) VALUES(?, ?, ?, ?, ?, ?, ?)",(newID, newHostname, newNetwork, newLighthouse, newOS, newServices, newVersion))
        dbConnect.commit()
        # Close DB connection
        dbConnect.close()

def endpointCertGen(certType):
    # make certs dir if it doesn't already exist
    if not os.path.exists('certs'):
        os.makedirs('certs')

    # new endpoint cert generation
    if certType == '1':
        if existingNetwork == "notset":
            print("No endpoints exist in the DB, please add at least one")
        #  check if ca eists and if it doesn't request that it be generated
        elif not os.path.exists('certs/ca.crt') or not os.path.exists('certs/ca.key'):
            print ("CA cert does not exist, please generate one first.")
        else:
            x = 0
            y = 0
            dbConnect = sqlite3.connect(NEBMANDB)
            dbCurser = dbConnect.cursor()
            dbContent = dbCurser.execute("SELECT * FROM nebmanClients")
            print("Generating cert for endpoint")
            print("----------------------------------")
            for row in dbContent:
                print(str(x) +" - "+row[1])
                x+=1
            # Close DB connection
            dbConnect.close()
            endpointSelection = input("Select an endpoint from list above (0, 1 ..): ")

            dbConnect = sqlite3.connect(NEBMANDB)
            dbCurser = dbConnect.cursor()
            dbContent = dbCurser.execute("SELECT * FROM nebmanClients")
            for row in dbContent:
                if endpointSelection == str(y):
                    newEndpointCertCmd="./nebula-cert sign -ca-crt ./certs/ca.crt -ca-key ./certs/ca.key -out-crt ./certs/" +row[1]+ ".crt -out-key ./certs/" +row[1]+ ".key -name " +row[1]+ " -ip " + existingNetwork + "." + str(row[0]) + "/24"
                    subprocess.call(newEndpointCertCmd, shell=True)
                    break
                else:
                    y+=1
            # Close DB connection
            dbConnect.close()

    # new ca cert generation, this should only be done once in most cases
    elif certType == '99':
        #  check if ca eists and if it does request that it be deleted
        if os.path.exists('certs/ca.crt') or os.path.exists('certs/ca.key'):
            print ("CA cert alrady exists, you need to manually delete CA cert and key first.")
        else:
            print("Generating initial CA cert for org")
            print("----------------------------------")
            orgName = input("Please enter org name: ")
            newOrgCertCmd = "./nebula-cert ca -out-crt ./certs/ca.crt -out-key ./certs/ca.key -name \""+orgName+"\""
            subprocess.call(newOrgCertCmd, shell=True)
    else:
        print("invalid choice")

def updateNebula():
    # Ref global variable
    global existingVersion
    # Does nebula binary exist in Ansible folder and if so what's the version.
    print("----------------------")
    print("Update Nebula Binaries")
    print("----------------------")
    if os.path.exists('ansible/playbooks/files/nebula'):
        getAnsVersion="./ansible/playbooks/files/nebula --version"
        ansVersion = str(subprocess.check_output(getAnsVersion, shell=True))
        ansVersion = str(ansVersion[11:16])
        print("- Existing version found is: " + existingVersion)
        if existingVersion == ansVersion:
            print("- Ansible binary found is: " + bcolors.GREEN + ansVersion + bcolors.END)
        else:
            print("- Ansible binary found is: " + bcolors.ORANGE + ansVersion + bcolors.END)
    else:
            print("- Ansible binary found is: " + bcolors.RED + "Not found" + bcolors.END)



## Cert purge, should only be used in event an entire new set of certs is going to be generated.
def purgeCerts():
    if not os.path.exists('certs'):
        print("No certs found, nothing to do here")
    else:
        print("## Warning, this is destructive, ALL CERTS WILL BE DELETED, inc CA ##")
        confirmChoice = input("Please type yes to confirm you wish to proceed: ")
        if confirmChoice == "yes":
            certsDir = "certs/"
            certFiles = os.listdir(certsDir)
            # iterate through files and only delete .crt and .key files.
            for certFile in certFiles:
                if certFile.endswith(".crt") or certFile.endswith(".key"):
                    os.remove(os.path.join(certsDir, certFile))
        else:
            print("Not confirmed, exiting.")


if __name__ == "__main__":
    initDB()
    pullNebula()
    print("---------------------")
    print("Current status of app")
    print("---------------------")
    checkState()
    print("---------------------------------")
    print("1 - View current clients in the DB")
    print("2 - Add new client in the DB")
    print("3 - Generate new CA cert for organisation")
    print("4 - Generate certs for an endpoint in the DB")
    print("5 - Generate Ansible inventory")
    print("6 - Update Nebula version")
    print("99 - Purge all certs")
    print("---------------------------------")
    menuChoice = input("Please select from the menu above: ")

    if menuChoice == '1':
        listClients()
    elif menuChoice == '2':
        addClient()
    elif menuChoice == '3':
        endpointCertGen("99")
    elif menuChoice == '4':
        endpointCertGen("1")
    elif menuChoice == '5':
        ansibleGen()
    elif menuChoice == '6':
        updateNebula()
    elif menuChoice == '99':
        purgeCerts()
